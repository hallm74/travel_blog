from django.db import models
from django.utils.text import slugify
from .utils import generate_blog_content, fetch_unsplash_image
from decouple import config
import re

class BlogPost(models.Model):
    """
    Model to store information about travel blog posts.
    """
    title = models.CharField(max_length=255)
    slug = models.SlugField(unique=True, blank=True, null=True)
    author = models.CharField(max_length=100, default="AI", help_text="Name of the content creator, default is AI.")
    pub_date = models.DateTimeField(auto_now_add=True, help_text="Date and time when the post is published.")
    tags = models.ManyToManyField('Tag', blank=True, help_text="Tags related to the blog post.")
    content = models.TextField(blank=True, help_text="Main content of the blog post, generated by AI.")
    image_url = models.URLField(max_length=500, blank=True, null=True, help_text="URL of the image fetched from Unsplash.")
    description = models.CharField(max_length=500, blank=True, help_text="Short description or summary of the post.")

    def save(self, *args, **kwargs):
        # Automatically generate a slug if it's not provided
        if not self.slug:
            self.slug = slugify(self.title)
        super().save(*args, **kwargs)

    def generate_content_and_image(self):
        """
        Generate blog content using OpenAI and fetch an image from Unsplash.
        """
        chatgpt_api_key = config("CHATGPT_API_KEY")
        unsplash_api_key = config("UNSPLASH_API_KEY")

        # Generate content using OpenAI
        self.content = generate_blog_content(self.title, chatgpt_api_key)

        # Remove "Title:" from the generated content and description
        self.content = re.sub(r"^\s*Title:\s*", "", self.content).strip()

        # Extract description (first 25 words, truncated to 500 characters)
        self.description = " ".join(self.content.split()[:25]) + "..."
        self.description = re.sub(r"^\s*Title:\s*", "", self.description).strip()

        # Fetch an image from Unsplash
        self.image_url = fetch_unsplash_image(self.title, unsplash_api_key)

        # Save the instance after generating the content, description, and image
        self.save()


class Tag(models.Model):
    """
    Model to store tags for blog posts.
    """
    name = models.CharField(max_length=50, unique=True, help_text="Name of the tag.")

    def __str__(self):
        return self.name